openapi: 3.0.0
info:
  title: Dealership API
  version: 1.0.0
tags:
  - name: users
  - name: cars
paths:
  # --- User section ---
  /api/auth/signup:
    post:
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUp'

      responses:
        200:
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully!"
  
  /api/auth/signout:
    post:
      tags:
      - users
      responses:
        200:
          description: Sign out of user account.
          

  /api/auth/signin:
    post:
      tags:
      - users
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignIn'

      responses:
        200:
          description: User registered successfully.
          headers:
            auth-cookie:
              description: JWT token.
              schema:
                type: string
        401:
          description: Bad credentials.

  /api/auth/{id}:
    delete:
      tags:
      - users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: User deleted.
        404:
          description: User not found.
  
  # --- Car section ---
  /api/cars:
    get:
      tags:
      - cars
      responses:
        '200':
          description: List of all the cars in the database.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
  
    post:
      tags: 
      - cars
      requestBody:
        description: Car data in JSON.
        content:
          application/json:
            schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarData'
              
      responses:
        201:
          description: Successfully added to the database.
    
  /api/cars/{id}:
    get:
      tags:
      - cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Car with given id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
                  
        '404':
          description: No car found with given id.
    
    put:
      tags:
      - cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        description: Car data in JSON.
        content:
          application/json:
            schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarData'
      responses:
        200:
          description: Successfully updated car data.
        404:
          description: Car not found.
    
    delete:
      tags:
      - cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Deleted the car.
        404:
          description: Car not found.
          
components:
  schemas:
  
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  
    Region:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    
    UserSignIn:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    
    UserSignUp:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    CarData:
      type: object
      properties:
        brand:
          type: string
        model:
          type: string
        regions:
          type: array
          items:
            type: string
        stock:
          type: integer
            
    Car:
      type: object
      properties:
        id:
          type: integer
        brand:
          type: string
        model:
          type: string
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
        stock:
          type: integer
  
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth-cookie
        